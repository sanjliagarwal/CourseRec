# -*- coding: utf-8 -*-
"""AWS_NoteBook_DataX.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1muldHGSJRe5IgBUoSkiZPqZj9sV-xHtY
"""

import numpy as np
import pandas as pd

read_data=pd.read_csv('Course_Similarity_Data.csv')
read_data=read_data.drop('Unnamed: 0',axis=1)
read_data

import anvil.server
anvil.server.connect("3TV5WAYJ7E2BZCXO7656DQCW-NAHKTWIW73VX5W2E")
from scipy import spatial
@anvil.server.callable
def calculate_similarity(units,dsa,ca,mc,des,app,inter_branch,ds,prof_goal,workload,final,mid,ass_freq,coding):
  input_array=generate_input_array(units,dsa,ca,mc,des,app,inter_branch,ds,prof_goal,workload,final,mid,ass_freq,coding)
  li=[]
  sim_data=read_data.drop('Course Title',axis=1)
  for i in range(0,len(sim_data)):
    result =1-spatial.distance.cosine(sim_data.iloc[i],input_array)
    li.append(result)
  print(li)
  return li

@anvil.server.callable
def generate_input_array(units,dsa,ca,mc,des,app,inter_branch,ds,prof_goal,workload,final,mid,ass_freq,coding):
  units_input=int(units)
  dsa_input=1 if dsa=='Yes' else 0
  ca_input=1 if ca=='Yes' else 0
  mc_input=1 if mc=='Yes' else 0
  des_input=1 if des=='Yes' else 0
  app_input=1 if app=='Yes' else 0
  inter_input=1 if inter_branch=='Yes' else 0
  ds_input=1 if ds=='Yes' else 0
  job_input=1 if prof_goal =='Job' else 0
  research_input=1 if prof_goal =='Research' else 0
  want_assign=1 if workload in ('Assignment','No Opinion') else 0 
  want_project=1 if workload in ('Project','No Opinion') else 0
  want_final=1 if final=='Yes' else 0
  want_mid=1 if mid=='Yes' else 0
  ass_freq=2 if ass_freq=='Bimonthly' else (1 if ass_freq=='Weekly' else 0)
  code_input=1 if coding=='Yes' else 0
  input_array=[units_input,dsa_input,ca_input,mc_input,des_input,app_input,inter_input,
               ds_input,job_input,research_input,want_assign,want_project,want_final,want_mid,ass_freq,code_input]
  print(input_array)
  return input_array

@anvil.server.callable
def final_func(units,dsa,ca,mc,des,app,inter_branch,ds,prof_goal,workload,final,mid,ass_freq,coding, courseName):
  sim=calculate_similarity(units,dsa,ca,mc,des,app,inter_branch,ds,prof_goal,workload,final,mid,ass_freq,coding)
  final_data=pd.DataFrame()
  courseName_lower=courseName.lower()
  final_data['course_name']=read_data['Course Title'].str.lower()
  final_data['Compatibility']=sim
  df2=final_data[final_data['course_name']==courseName_lower]['Compatibility']
  return df2.iloc[0]
p=final_func(3,'Yes','Yes','No','Yes','No','Yes','No','Job','Project','Yes','No','Weekly','Yes','Data Structures')
print(float(p))
anvil.server.wait_forever()



